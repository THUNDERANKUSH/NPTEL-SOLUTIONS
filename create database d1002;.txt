create database d1002;
use d1002;
create table Salesman(Salesman_id int primary key,name varchar(50),city varchar(50),commission decimal(5,2));
INSERT INTO Salesman VALUES(5001,'Sachin','Chennai',0.15);
INSERT INTO Salesman VALUES(5002,'Danis','Kolkata',0.13);
INSERT INTO Salesman VALUES(5005,'Hari','Mumbai',0.11);
INSERT INTO Salesman VALUES(5006,'Ambar','Kolkata',0.14);
INSERT INTO Salesman VALUES(5007,'Paul','Mysuru',0.13);
INSERT INTO Salesman VALUES(5003,'Goutham','Hyderabad',0.12);

CREATE TABLE OrderTable (
    order_no INT PRIMARY KEY,
    purch_amt INT,
    ord_date DATE,
    cust_id INT,
    salesman_id INT,
    FOREIGN KEY (salesman_id) REFERENCES Salesman(Salesman_id)
);
insert into OrderTable values(70001,150,'2021-10-05',3005,5002);
insert into OrderTable values(70009,270,'2021-09-10',3001,5005);
insert into OrderTable values(70002,65,'2021-10-05',3002,5001);
insert into OrderTable values(70004,110,'2021-08-17',3009,5003);
insert into OrderTable values(70007,948,'2021-09-10',3005,5002);
insert into OrderTable values(70005,2400,'2021-07-27',3007,5001);
insert into OrderTable values(70010,1983,'2021-10-10',3004,5006);
insert into OrderTable values(70003,2480,'2021-10-10',3009,5003);
insert into OrderTable values(70008,5760,'2021-09-10',3002,5001);
insert into OrderTable values(70012,250,'2021-06-27',3009,5003);
insert into OrderTable values(70013,3045,'2021-04-25',3002,5001);     
insert into OrderTable values(70011,75,'2021-08-17',3003,5007);

CREATE TABLE Customer (
    cust_id INT PRIMARY KEY,
    cust_name VARCHAR(255),
    city varchar(255),
    grade INT,
     salesman_id INT,
  foreign key(salesman_id) references Salesman(Salesman_id)
  );

INSERT INTO Customer (cust_id, cust_name,city, grade, salesman_id)
VALUES
    (3002, 'Nandan','chennai', 100, 5001),
    (3007, 'sunil','chennai', 200, 5001),
    (3005, 'rick', 'hyderabad',200, 5002),
    (3008, 'akshay','mumbai', 300, 5002),
    (3004, 'jyothi', 'kolkatta',300, 5006),
    (3009, 'murali', 'vizaq',100, 5003),
    (3003, 'xavier', 'delhi',200, 5007),
    (3001, 'rihan','mumbai' ,null , 5005);
    
SELECT C.cust_name, S.name AS salesman_name, S.city AS salesman_city
FROM Customer C
JOIN Salesman S ON C.city = S.city;

SELECT OT.order_no, C.cust_name, OT.cust_id, OT.salesman_id
FROM OrderTable OT
JOIN Customer C ON OT.cust_id = C.cust_id
JOIN Salesman S ON OT.salesman_id = S.Salesman_id
WHERE C.city <> S.city;

SELECT OT.order_no, OT.purch_amt, OT.ord_date, OT.cust_id, OT.salesman_id
FROM OrderTable OT
JOIN Salesman S ON OT.salesman_id = S.Salesman_id
WHERE S.name = 'Paul';

SELECT C.cust_name, C.city, S.name AS salesman_name, S.commission
FROM Customer C
JOIN Salesman S ON C.city = S.city
WHERE S.commission > 0.12;

SELECT OT.order_no, OT.purch_amt, C.cust_name, C.city
FROM OrderTable OT
JOIN Customer C ON OT.cust_id = C.cust_id
WHERE OT.purch_amt BETWEEN 500 AND 2000;

SELECT OT.order_no, OT.purch_amt, OT.ord_date, OT.cust_id, OT.salesman_id
FROM OrderTable OT
JOIN (
    SELECT cust_id, AVG(purch_amt) AS avg_amount
    FROM OrderTable
    GROUP BY cust_id
) AS AvgAmounts ON OT.cust_id = AvgAmounts.cust_id
WHERE OT.purch_amt > AvgAmounts.avg_amount;





-- Create table
CREATE TABLE SALARY_DETAILS (
    ENO INT PRIMARY KEY,
    ENAME VARCHAR(255),
    DEPT VARCHAR(255),
    BRANCH VARCHAR(255),
    BASIC DECIMAL(10, 2),
    HRA DECIMAL(10, 2),
    DEDUCTIONS DECIMAL(10, 2),
    TAX DECIMAL(10, 2),
    DATE_OF_JOIN DATE
);

-- Insert records
INSERT INTO SALARY_DETAILS VALUES
(1, 'John Doe', 'IT', 'Main', 50000.00, 15000.00, 5000.00, 2000.00, '2023-01-15'),
(2, 'Jane Smith', 'HR', 'Branch A', 48000.00, 12000.00, 4500.00, 1800.00, '2023-02-20'),
-- Add more records...

-- Query (a) Find the average of BASIC pay
SELECT AVG(BASIC) AS AVG_BASIC_PAY FROM SALARY_DETAILS;

-- Query (b) Determine the maximum and minimum of deductions
SELECT MAX(DEDUCTIONS) AS MAX_DEDUCTIONS, MIN(DEDUCTIONS) AS MIN_DEDUCTIONS FROM SALARY_DETAILS;

-- Query (c) Sort all the records as per their BASIC pay in ascending order
SELECT * FROM SALARY_DETAILS ORDER BY BASIC ASC;

-- Query (d) Sort all the records as per the DATE-OF-JOIN
SELECT * FROM SALARY_DETAILS ORDER BY DATE_OF_JOIN;

-- Query (e) Display all the records whose ENAME starts with "s"
SELECT * FROM SALARY_DETAILS WHERE ENAME LIKE 'S%';




CREATE TABLE Book (
    ISBN VARCHAR(13) PRIMARY KEY,
    TITLE VARCHAR(100),
    AUTHORS VARCHAR(255),
    PUBLISHER VARCHAR(50),
    NO_OF_AUTHORS INT,
    YEAR INT,
    VOLUME VARCHAR(10),
    PRICE DECIMAL(10, 2),
    NO_OF_PAGES INT
);
INSERT INTO Book VALUES
('9780141182551', 'To Kill a Mockingbird', 'Harper Lee', 'Penguin', 1, 1960, 'I', 10.99, 324),
('9780345803504', '1984', 'George Orwell', 'Vintage', 1, 1949, 'II', 12.99, 328),
('9780061120084', 'To Kill a Mockingbird', 'Harper Lee', 'HarperCollins', 1, 2006, 'I', 14.99, 336),
-- Add more records as needed
SELECT * FROM Book WHERE YEAR = 2011;
SELECT * FROM Book WHERE VOLUME = 'II';
SELECT * FROM Book WHERE YEAR = 2010 AND PRICE >= 500;
-- Assuming the user input for the title is stored in a variable :user_title
SELECT ISBN FROM Book WHERE TITLE = :user_title;
SELECT * FROM Book WHERE NO_OF_AUTHORS >= 2;






-- Create table
CREATE TABLE CONTACT (
    ENROLNO INT PRIMARY KEY,
    SNAME VARCHAR(255),
    SEMESTER INT,
    BRANCH_OF_ENGINEERING VARCHAR(255),
    ADDRESS1 VARCHAR(255),
    ADDRESS2 VARCHAR(255),
    CITY VARCHAR(255),
    STATE VARCHAR(255),
    MOBILE VARCHAR(15),
    EMAIL_ADDRESS VARCHAR(255),
    PIN_CODE VARCHAR(10)
);

-- Insert records
INSERT INTO CONTACT VALUES
(1, 'Alice Adams', 3, 'Computer Science', 'Street 1', 'Apt 101', 'CityA', 'StateA', '1234567890', 'alice@example.com', '12345'),
(2, 'Bob Brown', 2, 'Electrical Engineering', 'Street 2', 'Apt 202', 'CityB', 'StateB', NULL, 'bob@example.com', '67890'),
-- Add more records...

-- Query (a) Display all records without mobile numbers
SELECT * FROM CONTACT WHERE MOBILE IS NULL;

-- Query (b) Sort all records by SNAME chronologically
SELECT * FROM CONTACT ORDER BY SNAME;

-- Query (c) Display records in 3rd semester of Computer Science branch
SELECT * FROM CONTACT WHERE SEMESTER = 3 AND BRANCH_OF_ENGINEERING = 'Computer Science';

-- Query (d) Display records based on user-provided CITY
-- Replace 'UserProvidedCity' with the actual city provided by the user
SELECT * FROM CONTACT WHERE CITY = 'UserProvidedCity';

-- Query (e) Display SNAME and EMAIL ADDRESS of records with SNAME starting with "A"
SELECT SNAME, EMAIL_ADDRESS FROM CONTACT WHERE SNAME LIKE 'A%';










CREATE TABLE STUDENT (
    FIRST_NAME VARCHAR(50),
    MIDDLE_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
    STUDENT_ENRLNO VARCHAR(10) PRIMARY KEY,
    DATE_OF_BIRTH DATE,
    CLASS VARCHAR(10),
    SECTION VARCHAR(10),
    GENDER VARCHAR(10),
    YEAR_OF_JOIN INT,
    ADMISSION_NO VARCHAR(20),
    ADDRESS1 VARCHAR(255),
    ADDRESS2 VARCHAR(255),
    CITY VARCHAR(50),
    STATE VARCHAR(50),
    RES_PHONE VARCHAR(15),
    PIN_CODE VARCHAR(10)
);
SELECT * FROM STUDENT WHERE ADDRESS2 LIKE '%.com%';
SELECT * FROM STUDENT WHERE FIRST_NAME LIKE 'A%';
SELECT * FROM STUDENT WHERE GENDER = 'Female';
SELECT * FROM STUDENT WHERE YEAR_OF_JOIN = 2000;
SELECT * FROM STUDENT ORDER BY ADMISSION_NO ASC;







CREATE TABLE DEPENDENT (
    ENO INT PRIMARY KEY,
    DEPENDENT_NAME VARCHAR(50),
    SEX CHAR(1),
    DATE_OF_BIRTH DATE,
    AGE INT,
    RELATIONSHIP VARCHAR(20)
);
INSERT INTO DEPENDENT VALUES
(123, 'John Doe', 'M', '1980-05-15', 42, 'Son'),
(123, 'Jane Doe', 'F', '1985-08-20', 37, 'Daughter'),
-- Add more records as needed
SELECT DEPENDENT_NAME, SEX, RELATIONSHIP FROM DEPENDENT WHERE ENO = 123;
SELECT * FROM DEPENDENT ORDER BY ENO ASC;
SELECT * FROM DEPENDENT WHERE SEX = 'M';
SELECT ENO, DEPENDENT_NAME FROM DEPENDENT WHERE RELATIONSHIP = 'Wife';
SELECT ENO, DEPENDENT_NAME FROM DEPENDENT WHERE AGE > 60;




